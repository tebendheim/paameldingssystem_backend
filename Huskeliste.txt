1. Lag glemt passord funksjon.
2. Bruker må kunne slette en registrering
3. bruker må kunne legge inn felter
4. bruker må kunne se sine egne events
5. Sjekke at man ikke kan endre event id og se andres eventer.
6. det må være mulig å bytte eier

1. fortsettelse: har lagt til for å kunne ha permissions. Må nå kunne legge til en bruker til permissions. og må deretter bruke forskjellige auth-middleware for å 
sjekke hvordan type tilgang bruker har. Start her er er å vise fram alle event som bruker enten er eier av eller har tilganger til. har startet på det.

2. sette opp ett eller annet form for test system for å sjekke hvordan backend fungerer ved test. dette bør gjøres før jeg fortsetter.







GET /api/events/:id: returnerer info om eventet.

GET /api/events/:id/fields: returnerer felter for eventet.

GET /api/events/:id/registrations/summary


MockClient vs direkte:

Når ett endepunkt oppretter en klient først og deretter kjører flere queries. Spesielt om man benytter transaksjoner

 const mockClient = {
    query: jest.fn(),
    release: jest.fn(),
  };

  beforeEach(() => {
    jest.clearAllMocks();
    (pool.connect as jest.Mock).mockResolvedValue(mockClient);
  });  it("should insert event and tickets, then commit transaction", async () => { 
    mockClient.query
      .mockResolvedValueOnce(undefined) // BEGIN
      .mockResolvedValueOnce({ rows: [{ id: 123 }] }) // INSERT INTO events
      .mockResolvedValueOnce(undefined) // INSERT ticket 1
      .mockResolvedValueOnce(undefined) // INSERT ticket 2
      .mockResolvedValueOnce(undefined); // COMMIT

Hvis man bare har en enkelt query i endepunktet kan man heller bruke denne løsningen

 (pool.query as jest.Mock).mockResolvedValueOnce({.